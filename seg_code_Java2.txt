import java.math.BigInteger ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNext ( ) ) { String s1 = sc . next ( ) ; String s2 = sc . next ( ) ; if ( s1 . length ( ) > | | s2 . length ( ) > ) System . out . println ( ) ; BigInteger b = new BigInteger ( s1 ) . add ( new BigInteger ( s2 ) ) ; System . out . println ( b . toString ( ) . length ( ) > ? : b ) ; } } } import java.math.BigInteger ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int count = sc . nextInt ( ) ; for ( int i = ; i < count ; i + + ) { BigInteger a = sc . nextBigInteger ( ) ; BigInteger b = sc . nextBigInteger ( ) ; a . add ( b ) ; System . out . println ( < a . toString ( ) . length ( ) ? : a . toString ( ) ) ; } } } import java.util.* ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { StringBuffer int1 = new StringBuffer ( scanner . next ( ) ) ; StringBuffer int2 = new StringBuffer ( scanner . next ( ) ) ; StringBuffer result = new StringBuffer ( ) ; int carry = ; int1 . reverse ( ) ; int2 . reverse ( ) ; int maxDig = Math . max ( int1 . length ( ) , int2 . length ( ) ) ; if ( maxDig > ) { System . out . println ( ) ; break ; } for ( int k = ; k < maxDig ; k + + ) { int aInt1 = ; int aInt2 = ; if ( k < int1 . length ( ) ) { aInt1 = Integer . parseInt ( int1 . substring ( k , k + ) ) ; } if ( k < int2 . length ( ) ) { aInt2 = Integer . parseInt ( int2 . substring ( k , k + ) ) ; } int aSum = carry + aInt1 + aInt2 ; if ( aSum > = ) { carry = ; result . append ( aSum - ) ; } else { carry = ; result . append ( aSum ) ; } } if ( carry = = ) { result . append ( ) ; } if ( result . length ( ) > ) { System . out . println ( ) ; break ; } System . out . println ( result . reverse ( ) ) ; } } } import java.io.* ; import java.math.* ; public class Main { public static void main ( String args [ ] ) throws IOException { String str1 , str2 ; int i , d = ; BigInteger big1 , big2 , total ; BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; i = Integer . parseInt ( input . readLine ( ) ) ; while ( d + + < i ) { str1 = input . readLine ( ) ; big1 = new BigInteger ( str1 ) ; str2 = input . readLine ( ) ; big2 = new BigInteger ( str2 ) ; total = big1 . add ( big2 ) ; if ( str1 . length ( ) > | | str2 . length ( ) > | | total . toString ( ) . length ( ) > ) { System . out . println ( ) ; } else { System . out . println ( total ) ; } } } } import java.util.* ; import java.math.* ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n ; n = s . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { BigInteger a = s . nextBigInteger ( ) . add ( s . nextBigInteger ( ) ) ; if ( a . toString ( ) . length ( ) > ) System . out . println ( ) ; else System . out . println ( a . toString ( ) ) ; } } } / / National budget import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.math.BigDecimal ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; try { int n = Integer . parseInt ( br . readLine ( ) ) ; for ( int i = ; i < n ; i + + ) { BigDecimal budget1 = new BigDecimal ( br . readLine ( ) ) ; BigDecimal budget2 = new BigDecimal ( br . readLine ( ) ) ; System . out . println ( budget1 . add ( budget2 ) ) ; } } catch ( Exception e ) { System . out . println ( e ) ; } } } import java.util.* ; import java.math.* ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { BigInteger a = new BigInteger ( scanner . next ( ) ) ; BigInteger b = new BigInteger ( scanner . next ( ) ) ; BigInteger c = a . add ( b ) ; System . out . println ( c . toString ( ) . length ( ) > ? : c ) ; } } } import java.math.BigInteger ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) { int t ; Scanner scanner = new Scanner ( System . in ) ; t = scanner . nextInt ( ) ; for ( int run_id = ; run_id < t ; run_id + + ) { String a , b ; a = scanner . next ( ) ; b = scanner . next ( ) ; BigInteger biga , bigb ; biga = new BigInteger ( a ) ; bigb = new BigInteger ( b ) ; BigInteger sum = biga . add ( bigb ) ; System . out . println ( sum . toString ( ) ) ; } } } import java.util.* ; import java.lang.* ; import java.io.* ; import java.math.* ; public class Main { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; for ( int i = ; i < q ; + + i ) { BigInteger n1 = sc . nextBigInteger ( ) ; BigInteger n2 = sc . nextBigInteger ( ) ; BigInteger ans = n1 . add ( n2 ) ; String sa = ans . toString ( ) ; if ( sa . length ( ) > ) { System . out . println ( ) ; } else { System . out . println ( sa ) ; } } } import java.util.Scanner ; import java.util.Stack ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; while ( n - - > ) { String s1 = in . next ( ) ; String s2 = in . next ( ) ; if ( s1 . length ( ) > | | s2 . length ( ) > ) { System . out . println ( ) ; continue ; } StringBuffer s = new StringBuffer ( s1 ) ; s1 = s . reverse ( ) . toString ( ) ; s = new StringBuffer ( s2 ) ; s2 = s . reverse ( ) . toString ( ) ; Stack < Integer > stack = new Stack < > ( ) ; int a = , b = ; int flag = ; if ( s1 . length ( ) < s2 . length ( ) ) { String t = s1 ; s1 = s2 ; s2 = t ; } for ( int i = ; i < s1 . length ( ) ; i + + ) { switch ( s1 . charAt ( i ) ) { case : a = ; break ; case : a = ; break ; case : a = ; break ; case : a = ; break ; case : a = ; break ; case : a = ; break ; case : a = ; break ; case : a = ; break ; case : a = ; break ; case : a = ; break ; } if ( s2 . length ( ) < = i ) b = ; else { switch ( s2 . charAt ( i ) ) { case : b = ; break ; case : b = ; break ; case : b = ; break ; case : b = ; break ; case : b = ; break ; case : b = ; break ; case : b = ; break ; case : b = ; break ; case : b = ; break ; case : b = ; break ; } } if ( a + b + flag > ) { stack . add ( a + b + flag - ) ; flag = ; } else { stack . add ( a + b + flag ) ; flag = ; } } if ( flag = = ) stack . add ( flag ) ; if ( stack . size ( ) > ) System . out . println ( ) ; else { while ( ! stack . isEmpty ( ) ) { int c = stack . pop ( ) ; System . out . print ( c ) ; } System . out . println ( ) ; } } in . close ( ) ; } } import java.io.BufferedReader ; import java.io.InputStreamReader ; public class Main { public static void main ( String [ ] args ) { try { Main test = new Main ( ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int problemNumber = Integer . parseInt ( reader . readLine ( ) ) ; for ( int i = ; i < problemNumber ; i + + ) { String origin = reader . readLine ( ) ; String addition = reader . readLine ( ) ; String result = test . getSum ( origin , addition ) ; if ( result = = null ) { System . out . println ( ) ; } else { System . out . println ( result ) ; } } } catch ( Exception e ) { e . printStackTrace ( ) ; } / * Problem0015_NationalBudget test = new Problem0015_NationalBudget ( ) ; for ( int i = ; i < ; i + + ) { for ( int j = ; j < ; j + + ) { String answer = test . getSum ( Integer . toString ( i ) , Integer . toString ( j ) ) ; if ( i + j < ) { if ( answer . equals ( Integer . toString ( i + j ) ) ) { System . out . println ( i + + j + + answer ) ; } else { System . err . println ( i + + j + + answer ) ; } } else { if ( answer = = null ) { System . out . println ( i + + j + + ) ; } else { System . err . println ( i + + j + + answer ) ; } } } } * / } String getSum ( String origin , String addition ) { final int CEILLING = ; char [ ] originArray = origin . toCharArray ( ) ; char [ ] additionArray = addition . toCharArray ( ) ; char [ ] maxCharArray = ( originArray . length < additionArray . length ? additionArray : originArray ) ; char [ ] minCharArray = ( originArray . length < additionArray . length ? originArray : additionArray ) ; if ( maxCharArray . length > CEILLING ) { return null ; } int [ ] resultNumberArray = new int [ maxCharArray . length + ] ; / / ª P Â ã ª é Â ª é B int position ; for ( position = ; position < minCharArray . length + ; position + + ) { int originNumber = Integer . parseInt ( + maxCharArray [ maxCharArray . length - position ] ) ; int additionNumber = Integer . parseInt ( + minCharArray [ minCharArray . length - position ] ) ; int sum = originNumber + additionNumber + resultNumberArray [ resultNumberArray . length - position ] ; if ( sum < ) { resultNumberArray [ resultNumberArray . length - position ] = sum ; } else { sum = sum - ; resultNumberArray [ resultNumberArray . length - position ] = sum ; resultNumberArray [ resultNumberArray . length - position - ] + = ; } } for ( ; position < maxCharArray . length + ; position + + ) { int maxCharNumber = Integer . parseInt ( + maxCharArray [ position - position ] ) ; int sum = resultNumberArray [ resultNumberArray . length - position ] + maxCharNumber ; if ( sum < ) { resultNumberArray [ resultNumberArray . length - position ] = sum ; } else { sum = sum - ; resultNumberArray [ resultNumberArray . length - position ] = sum ; resultNumberArray [ resultNumberArray . length - position - ] + = ; } } if ( resultNumberArray . length > CEILLING + | | ( resultNumberArray . length = = CEILLING + & & resultNumberArray [ ] > ) ) { / / ª ã ª Á Ä80 ð ½ ê return null ; } StringBuilder textBuilder = new StringBuilder ( ) ; for ( int number : resultNumberArray ) { textBuilder . append ( Integer . toString ( number ) ) ; } String result = textBuilder . toString ( ) ; if ( result . startsWith ( ) ) { result = result . substring ( ) ; } return result ; } } import java.io.InputStreamReader ; import java.io.BufferedReader ; import java.io.IOException ; class Main { public static void main ( String [ ] a ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int count = Integer . parseInt ( br . readLine ( ) ) ; while ( count > ) { int length1 , length2 , over = ; String input1 = br . readLine ( ) ; String input2 = br . readLine ( ) ; StringBuilder answer = new StringBuilder ( ) ; length1 = input1 . length ( ) ; length2 = input2 . length ( ) ; while ( length1 > | | length2 > ) { int num1 , num2 ; StringBuilder ans = new StringBuilder ( ) ; if ( length1 > = ) { num1 = Integer . parseInt ( input1 . substring ( length1 - , length1 ) ) ; } else if ( length1 > ) { num1 = Integer . parseInt ( input1 . substring ( , length1 ) ) ; } else { num1 = ; } if ( length2 > = ) { num2 = Integer . parseInt ( input2 . substring ( length2 - , length2 ) ) ; } else if ( length2 > ) { num2 = Integer . parseInt ( input2 . substring ( , length2 ) ) ; } else { num2 = ; } length1 - = ; length2 - = ; ans . append ( String . valueOf ( ( num1 + num2 + over ) % ) ) ; over = ( num1 + num2 + over ) / ; while ( ans . length ( ) < & & ( length1 > | | length2 > ) ) { ans . insert ( , ) ; } answer . insert ( , ans ) ; } if ( over ! = ) { answer . insert ( , String . valueOf ( over ) ) ; } if ( answer . length ( ) < = ) { System . out . println ( answer ) ; } else { System . out . println ( ) ; } count - - ; } } } import java.util.* ; import java.math.* ; public class Main { public static void main ( String [ ] args ) { Scanner buf = new Scanner ( System . in ) ; int n ; boolean judge ; BigInteger s1 , s2 ; BigInteger sum ; n = buf . nextInt ( ) ; while ( n > ) { judge = false ; s1 = buf . nextBigInteger ( ) ; s2 = buf . nextBigInteger ( ) ; sum = s1 . add ( s2 ) ; if ( s1 . toString ( ) . length ( ) > | | s2 . toString ( ) . length ( ) > ) { System . out . println ( ) ; judge = true ; } else if ( sum . toString ( ) . length ( ) > ) { System . out . println ( ) ; judge = true ; } if ( ! judge ) System . out . println ( sum ) ; n - - ; } } } import java.math.BigDecimal ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int count = Integer . parseInt ( sc . nextLine ( ) ) ; for ( int i = ; i < count ; i + + ) { String output = new BigDecimal ( sc . nextLine ( ) ) . add ( new BigDecimal ( sc . nextLine ( ) ) ) . toString ( ) ; if ( output . length ( ) > ) { output = ; } System . out . println ( output ) ; } } } import java.util.* ; import java.math.BigInteger ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int N = Integer . parseInt ( sc . next ( ) ) ; for ( int i = ; i < N ; i + + ) { run ( ) ; } } static void run ( ) { String strA = sc . next ( ) ; BigInteger A = new BigInteger ( strA ) ; String strB = sc . next ( ) ; BigInteger B = new BigInteger ( strB ) ; String o = ; if ( A . add ( B ) . toString ( ) . length ( ) > ) { System . out . println ( o ) ; } else { System . out . println ( A . add ( B ) ) ; } } } class Main { public String conbineBigNumbers ( String strA , String strB ) { int lengthA = strA . length ( ) ; int lengthB = strB . length ( ) ; int numPartitionA = ( int ) Math . ceil ( lengthA / ) ; int numPartitionB = ( int ) Math . ceil ( lengthB / ) ; int carryOver = ; String strSum = ; for ( int partNo = ; partNo < Math . max ( numPartitionA , numPartitionB ) ; partNo + + ) { int aParts ; int bParts ; if ( partNo > = numPartitionA ) { aParts = ; } else { aParts = Integer . parseInt ( strA . substring ( Math . max ( , lengthA - * ( partNo + ) ) , lengthA - * partNo ) ) ; } if ( partNo > = numPartitionB ) { bParts = ; } else { bParts = Integer . parseInt ( strB . substring ( Math . max ( , lengthB - * ( partNo + ) ) , lengthB - * partNo ) ) ; } String newParts = String . valueOf ( ( aParts + bParts + carryOver ) % ) ; int newPartsLength = newParts . length ( ) ; if ( newPartsLength < ) { for ( int i = ; i < - newPartsLength ; i + + ) newParts = + newParts ; } strSum = newParts + strSum ; carryOver = ( aParts + bParts + carryOver ) / ; } strSum = carryOver + strSum ; strSum = strSum . replaceFirst ( , ) ; return strSum ; } public static void main ( String [ ] args ) throws NumberFormatException , IOException { InputStreamReader isr = new InputStreamReader ( System . in ) ; BufferedReader br = new BufferedReader ( isr ) ; int numSet = Integer . parseInt ( br . readLine ( ) ) ; for ( int iSet = ; iSet < numSet ; iSet + + ) { String strA = br . readLine ( ) ; String strB = br . readLine ( ) ; if ( strA . length ( ) > | | strB . length ( ) > ) { System . out . println ( ) ; } else { Main nationalBudget = new Main ( ) ; String sum = nationalBudget . conbineBigNumbers ( strA , strB ) ; if ( sum . length ( ) > ) { System . out . println ( ) ; } else { System . out . println ( sum ) ; } } } } } import java.math.BigInteger ; import java.util.* ; public class Main { public static void main ( String [ ] args ) throws java . io . IOException { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; while ( n ! = ) { BigInteger bi1 = new BigInteger ( scan . next ( ) ) ; BigInteger bi2 = new BigInteger ( scan . next ( ) ) ; BigInteger ans = bi1 . add ( bi2 ) ; if ( ans . toString ( ) . length ( ) < ) System . out . println ( ans ) ; else System . out . println ( ) ; n - - ; } } } import java.math.* ; import java.util.* ; public class Main { public static void main ( String [ ] args ) { Scanner cin = new Scanner ( System . in ) ; BigInteger a , b , c ; String s , ss , sss ; int n = cin . nextInt ( ) ; while ( n - - ! = ) { a = cin . nextBigInteger ( ) ; b = cin . nextBigInteger ( ) ; s = a . toString ( ) ; ss = b . toString ( ) ; if ( s . length ( ) > | | ss . length ( ) > ) { System . out . println ( ) ; continue ; } else { c = a . add ( b ) ; sss = c . toString ( ) ; if ( sss . length ( ) > ) { System . out . println ( ) ; continue ; } else System . out . println ( c ) ; } } } } import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = br . readLine ( ) ; int n = Integer . parseInt ( str ) ; for ( int i = ; i < = n ; i + + ) { String strA = br . readLine ( ) ; String strB = br . readLine ( ) ; int lengthA = strA . length ( ) ; int lengthB = strB . length ( ) ; if ( lengthA > | | lengthB > ) { System . out . println ( ) ; continue ; } int length ; if ( lengthA > = lengthB ) { length = lengthA ; } else { length = lengthB ; } String [ ] charastrA = strA . split ( , ) ; String [ ] charastrB = strB . split ( , ) ; Reverse ( charastrA ) ; Reverse ( charastrB ) ; int [ ] charaA = new int [ length ] ; int [ ] charaB = new int [ length ] ; for ( int j = ; j < lengthA ; j + + ) { charaA [ j ] = Integer . parseInt ( charastrA [ j ] ) ; } for ( int j = ; j < lengthB ; j + + ) { charaB [ j ] = Integer . parseInt ( charastrB [ j ] ) ; } int [ ] sum = new int [ length + ] ; for ( int k = ; k < length ; k + + ) { if ( charaA [ k ] + charaB [ k ] > = ) { sum [ k ] = charaA [ k ] + charaB [ k ] - ; charaA [ k + ] + + ; } else { sum [ k ] = charaA [ k ] + charaB [ k ] ; } } if ( sum . length = = & & sum [ length ] ! = ) { System . out . println ( ) ; } Boolean isHeadZero = true ; for ( int l = ; l < length ; l + + ) { if ( isHeadZero ) { if ( sum [ length - l ] = = ) { continue ; } else { isHeadZero = false ; } } System . out . println ( sum [ length - ] ) ; } System . out . println ( ) ; } } public static void Reverse ( String [ ] num ) { int length = num . length ; for ( int i = ; i < = length / ; i + + ) { int j = length - i - ; if ( i > = j ) { break ; } String temporary = num [ i ] ; num [ i ] = num [ j ] ; num [ j ] = temporary ; } } } import java.util.Scanner ; public class Main { void run ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int k = ; k < n ; k + + ) { char [ ] a = new char [ ] ; char [ ] b = new char [ ] ; int [ ] x = new int [ ] ; int [ ] y = new int [ ] ; int [ ] ans = new int [ ] ; a = sc . next ( ) . toCharArray ( ) ; b = sc . next ( ) . toCharArray ( ) ; for ( int i = ; i < a . length ; i + + ) { x [ i ] = a [ i ] - ; } for ( int i = ; i < b . length ; i + + ) { y [ i ] = b [ i ] - ; } int i = a . length - ; int j = b . length - ; int l = ; boolean flag = true ; while ( i > = | | j > = ) { if ( j < ) { while ( i > = ) { ans [ l ] + = x [ i ] ; if ( ans [ l ] > = ) { ans [ l ] - = ; if ( l + > = ) { flag = false ; break ; } ans [ l + ] = ; } l + + ; i - - ; } break ; } if ( i < ) { while ( j > = ) { ans [ l ] + = y [ j ] ; if ( ans [ l ] > = ) { ans [ l ] - = ; if ( l + > = ) { flag = false ; break ; } ans [ l + ] = ; } l + + ; j - - ; } break ; } ans [ l ] + = ( x [ i ] + y [ j ] ) ; if ( ans [ l ] > = ) { ans [ l ] - = ; if ( l + > = ) { flag = false ; break ; } ans [ l + ] = ; } l + + ; i - - ; j - - ; } if ( ! flag ) { System . out . println ( ) ; } else { if ( ans [ l ] ! = ) { l + + ; } for ( int m = l - ; m > = ; m - - ) { System . out . print ( ans [ m ] ) ; } System . out . println ( ) ; } } sc . close ( ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } } import java.util.* ; import java.math.* ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { BigInteger x = sc . nextBigInteger ( ) . add ( sc . nextBigInteger ( ) ) ; if ( x . toString ( ) . length ( ) > ) System . out . println ( ) ; else System . out . println ( x ) ; } } } import java.io.IOException ; import java.io.InputStreamReader ; import java.io.BufferedReader ; import java.util.StringTokenizer ; import java.util.List ; import java.util.ArrayList ; public class Main { public static void main ( String [ ] args ) throws IOException { Writer writer = new Writer ( ) ; Reader reader = new Reader ( ) ; final int count = reader . readInt ( ) ; for ( int i = ; i < count ; i + + ) { final String string1 = reader . read ( ) ; final String string2 = reader . read ( ) ; final BigNumber number1 = BigNumber . parse ( string1 ) ; final BigNumber number2 = BigNumber . parse ( string2 ) ; final BigNumber sum = BigNumber . add ( number1 , number2 ) ; final String sumString = sum . toString ( ) ; if ( sumString . length ( ) > ) { writer . write ( ) ; } else { writer . write ( sumString + ) ; } } writer . print ( ) ; } } class Method { private Method ( ) { } public static int getDigits ( int value ) { int digits = ; while ( value ! = ) { value / = ; digits + + ; } return digits ; } } class BigNumber { private static int DIGITS_OF_PART = ; private List < Integer > numberList ; public BigNumber ( ) { this . numberList = new ArrayList < > ( ) ; } public int getDigits ( ) { final int size = this . numberList . size ( ) ; int digits = ( size - ) * this . DIGITS_OF_PART ; int highValue = this . numberList . get ( size - ) ; digits + = Method . getDigits ( highValue ) ; return digits ; } public static BigNumber parse ( String valueText ) { BigNumber number = new BigNumber ( ) ; while ( ! valueText . equals ( ) ) { final int size = valueText . length ( ) ; int end = Math . min ( size , BigNumber . DIGITS_OF_PART ) ; final String token = valueText . substring ( size - end , size ) ; valueText = valueText . substring ( , size - end ) ; number . numberList . add ( Integer . parseInt ( token ) ) ; } return number ; } public static BigNumber add ( BigNumber a , BigNumber b ) { BigNumber number = new BigNumber ( ) ; int carryValue = ; for ( int i = ; i < a . numberList . size ( ) | | i < b . numberList . size ( ) ; i + + ) { int value = carryValue ; carryValue = ; if ( i < a . numberList . size ( ) ) { value + = a . numberList . get ( i ) ; } if ( i < b . numberList . size ( ) ) { value + = b . numberList . get ( i ) ; } int max = ( int ) Math . pow ( , BigNumber . DIGITS_OF_PART ) ; while ( value > = max ) { value - = max ; carryValue + + ; } number . numberList . add ( value ) ; } return number ; } public String toString ( ) { String string = new String ( ) ; final int max = this . numberList . size ( ) - ; for ( int i = max ; i > = ; i - - ) { String format ; if ( i = = max ) { format = ; } else { format = ; } string + = String . format ( format , this . numberList . get ( i ) ) ; } return string ; } } class Writer { private StringBuilder stringBuilder ; public Writer ( ) { this . stringBuilder = new StringBuilder ( ) ; } public < T > void write ( T text ) { this . stringBuilder . append ( text ) ; } public void print ( ) { System . out . print ( stringBuilder ) ; } } class Reader { private InputStreamReader inputReader ; private BufferedReader bufferedReader ; private StringTokenizer tokenizer ; private String delim ; public Reader ( ) { this . inputReader = new InputStreamReader ( System . in ) ; this . bufferedReader = new BufferedReader ( inputReader ) ; this . tokenizer = new StringTokenizer ( ) ; this . delim = null ; } public void setDelim ( String delim ) { this . delim = delim ; } public boolean isReadable ( ) throws IOException { try { checkTokenizer ( ) ; } catch ( NullPointerException e ) { return false ; } return true ; } public Integer readInt ( ) throws IOException { final String token = read ( ) ; if ( token = = null ) { return null ; } return Integer . parseInt ( token ) ; } public Double readDouble ( ) throws IOException { final String token = read ( ) ; if ( token = = null ) { return null ; } return Double . parseDouble ( token ) ; } public String read ( ) throws IOException { if ( ! isReadable ( ) ) { return null ; } if ( delim = = null ) { return this . tokenizer . nextToken ( ) ; } else { return this . tokenizer . nextToken ( delim ) ; } } private void checkTokenizer ( ) throws IOException , NullPointerException { if ( this . tokenizer . hasMoreTokens ( ) ) { return ; } final String line = this . bufferedReader . readLine ( ) ; this . tokenizer = new StringTokenizer ( line ) ; } } import java.util.* ; public class Main { Scanner sc = new Scanner ( System . in ) ; void run ( ) { int n = sc . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { String num1 = sc . next ( ) ; String num2 = sc . next ( ) ; String ans = rev ( add ( rev ( num1 ) , rev ( num2 ) ) ) ; if ( ans . length ( ) > ) ans = ; System . out . println ( ans ) ; } } String rev ( String str ) { String rev = ; for ( int i = str . length ( ) - ; i > = ; i - - ) rev + = str . charAt ( i ) ; return rev ; } String add ( String num1 , String num2 ) { String n1 , n2 ; if ( num1 . length ( ) - num2 . length ( ) > ) { n1 = num1 ; n2 = num2 ; } else { n1 = num2 ; n2 = num1 ; } String num = ; int n = ; for ( int i = ; i < n2 . length ( ) ; i + + ) { num + = ( n + ( n1 . charAt ( i ) - ) + ( n2 . charAt ( i ) - ) ) % ; n = ( n + ( n1 . charAt ( i ) - ) + ( n2 . charAt ( i ) - ) ) / ; } for ( int i = n2 . length ( ) ; i < n1 . length ( ) ; i + + ) { num + = ( n + ( n1 . charAt ( i ) - ) ) % ; n = ( n + ( n1 . charAt ( i ) - ) ) / ; } if ( n = = ) num + = ; return num ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } } import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.math.BigInteger ; public class Main { public static void main ( String argv [ ] ) { int num ; BigInteger bd1 ; BigInteger bd2 ; try { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; num = Integer . parseInt ( br . readLine ( ) ) ; while ( - - num > = ) { String ln1 = br . readLine ( ) ; String ln2 = br . readLine ( ) ; if ( ln1 . length ( ) > | | ln2 . length ( ) > ) { System . out . println ( ) ; } bd1 = new BigInteger ( ln1 ) ; bd2 = new BigInteger ( ln2 ) ; bd1 . add ( bd2 ) ; if ( bd1 . toString ( ) . length ( ) > ) { System . out . println ( ) ; } System . out . println ( bd1 . toString ( ) ) ; } } catch ( Exception e ) { } } } import java.io.* ; import java.math.BigInteger ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int N = Integer . parseInt ( in . readLine ( ) ) ; BigInteger a , b ; for ( int i = ; i < N ; i + + ) { a = new BigInteger ( in . readLine ( ) ) ; b = new BigInteger ( in . readLine ( ) ) ; if ( a . toString ( ) . length ( ) > | | b . toString ( ) . length ( ) > ) System . out . println ( ) ; a = a . add ( b ) ; if ( a . toString ( ) . length ( ) > ) System . out . println ( ) ; else { System . out . println ( a . toString ( ) ) ; } } } } import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; public class Main { public static void main ( String args [ ] ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String sc1 ; String sc2 ; char [ ] moji1 = new char [ ] ; char [ ] moji2 = new char [ ] ; int [ ] wa = new int [ ] ; int kuriagari = ; int souwa = ; String res = ; while ( true ) { sc1 = br . readLine ( ) ; sc2 = br . readLine ( ) ; if ( sc1 . length ( ) > = | | sc2 . length ( ) > = ) { System . out . println ( ) ; } else { StringBuffer sb = new StringBuffer ( sc1 ) ; sc1 = sb . reverse ( ) . toString ( ) ; sb = new StringBuffer ( sc2 ) ; sc2 = sb . reverse ( ) . toString ( ) ; for ( int i = ; i < ; i + + ) { moji1 [ - i ] = sc1 . charAt ( i ) ; moji2 [ - i ] = sc2 . charAt ( i ) ; } for ( int i = ; i < ; i + + ) { souwa = ( Character . getNumericValue ( moji1 [ - i ] ) ) + ( Character . getNumericValue ( moji1 [ - i ] ) ) ; wa [ - i ] = kuriagari + souwa % ; kuriagari = souwa / ; } souwa = ( Character . getNumericValue ( moji1 [ ] ) ) + ( Character . getNumericValue ( moji1 [ ] ) ) ; wa [ ] = kuriagari + souwa % ; kuriagari = souwa / ; if ( kuriagari > ) { System . out . println ( ) ; } else { for ( int i = ; i > = ; i - - ) { res = wa [ i ] + + res ; } System . out . println ( res ) ; } } } } } import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int N = * Integer . parseInt ( br . readLine ( ) . trim ( ) ) ; String [ ] s = new String [ N ] ; for ( int i = ; i < N ; i + + ) { s [ i ] = ( new StringBuilder ( br . readLine ( ) . trim ( ) ) ) . reverse ( ) . toString ( ) ; } for ( int i = ; i < N ; i + = ) { String A , B ; if ( s [ i ] . length ( ) < s [ i + ] . length ( ) ) { A = s [ i + ] ; B = s [ i ] ; } else { A = s [ i ] ; B = s [ i + ] ; } StringBuilder sb = new StringBuilder ( B ) ; for ( int j = ; j < A . length ( ) - B . length ( ) ; j + + ) sb . append ( ) ; B = sb . append ( ) . toString ( ) ; A = A + ; int [ ] As = new int [ A . length ( ) ] , Bs = new int [ A . length ( ) ] ; for ( int j = ; j < A . length ( ) ; j + + ) { As [ j ] = A . charAt ( j ) - ; Bs [ j ] = B . charAt ( j ) - ; } for ( int j = ; j < A . length ( ) - ; j + + ) { As [ j ] + = Bs [ j ] ; if ( As [ j ] > ) { As [ j ] - = ; As [ j + ] + + ; } } sb = new StringBuilder ( ) ; for ( int j = ; j < A . length ( ) ; j + + ) sb . append ( ( char ) ( As [ j ] + ) ) ; sb . reverse ( ) ; if ( sb . charAt ( ) = = ) sb . deleteCharAt ( ) ; String S = sb . toString ( ) ; if ( S . length ( ) > ) System . out . println ( ) ; else System . out . println ( + sb . toString ( ) ) ; } } } import java.util.Scanner ; import java.math.BigInteger ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { BigInteger a = sc . nextBigInteger ( ) ; BigInteger b = sc . nextBigInteger ( ) ; a = a . add ( b ) ; if ( String . valeOf ( a ) . length ( ) > ) { System . out . println ( ) ; } else { System . out . println ( a ) ; } } } } import java.util.* ; class Main { public static void main ( String [ ] _ ) { String s ; Scanner S = new Scanner ( System . in ) ; for ( int n = S . nextInt ( ) ; n - - > ; System . out . println ( s . length ( ) > ? : s ) ) s = S . nextBigInteger ( ) . add ( S . nextBigInteger ( ) ) . toString ( ) ; } } import java.util.Scanner ; public class Main { int SIZE = ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int k = ; k < n ; k + + ) { char [ ] a = new char [ SIZE ] ; char [ ] b = new char [ SIZE ] ; int [ ] x = new int [ SIZE ] ; int [ ] y = new int [ SIZE ] ; int [ ] ans = new int [ SIZE ] ; a = sc . next ( ) . toCharArray ( ) ; b = sc . next ( ) . toCharArray ( ) ; for ( int i = ; i < a . length ; i + + ) { x [ i ] = a [ i ] - ; } for ( int i = ; i < b . length ; i + + ) { y [ i ] = b [ i ] - ; } if ( a . length > | | b . length > ) { System . out . println ( ) ; continue ; } int i = a . length - ; int j = b . length - ; int l = ; boolean flag = true ; while ( i > = | | j > = ) { if ( j < ) { while ( i > = ) { ans [ l ] + = x [ i ] ; if ( ans [ l ] > = ) { ans [ l ] - = ; if ( l + > = ) { flag = false ; break ; } ans [ l + ] = ; } l + + ; i - - ; } break ; } if ( i < ) { while ( j > = ) { ans [ l ] + = y [ j ] ; if ( ans [ l ] > = ) { ans [ l ] - = ; if ( l + > = ) { flag = false ; break ; } ans [ l + ] = ; } l + + ; j - - ; } break ; } ans [ l ] + = ( x [ i ] + y [ j ] ) ; if ( ans [ l ] > = ) { ans [ l ] - = ; if ( l + > = ) { flag = false ; break ; } ans [ l + ] = ; } l + + ; i - - ; j - - ; } if ( ! flag ) { System . out . println ( ) ; } else { if ( ans [ l ] = = ) { l + + ; } for ( int m = l - ; m > = ; m - - ) { System . out . print ( ans [ m ] ) ; } System . out . println ( ) ; } } sc . close ( ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } } import java.util.Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n - - > ) { String a = sc . next ( ) ; String b = sc . next ( ) ; int result ; String answer = ; int m = ; if ( a . length ( ) > | | b . length ( ) > ) { System . out . println ( ) ; } else { for ( int i = a . length ( ) - , j = b . length ( ) - ; i > = | | j > = ; i - - , j - - ) { result = ( i < ? : a . charAt ( i ) ) - + ( j < ? : b . charAt ( j ) ) - + m ; answer + = result % ; m = result / ; } answer + = m = = ? m : ; } if ( answer . length ( ) < = ) System . out . println ( new StringBuffer ( answer ) . reverse ( ) . toString ( ) ) ; else System . out . println ( ) ; } } } import java.* ; import java.math.BigInteger ; import java.util.Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int test = sc . nextInt ( ) ; sc . nextLine ( ) ; String s1 = new String ( ) ; String s2 = new String ( ) ; while ( test > ) { test - - ; s1 = sc . nextLine ( ) ; s2 = sc . nextLine ( ) ; BigInteger b1 = new BigInteger ( s1 ) ; BigInteger b2 = new BigInteger ( s2 ) ; BigInteger result = new BigInteger ( ) ; result = result . add ( b1 ) ; result = result . add ( b2 ) ; String s3 = + result ; if ( s1 . length ( ) > | | s2 . length ( ) > | | s3 . length ( ) > ) System . out . println ( ) ; else System . out . println ( result ) ; } } } import java.math.BigInteger ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) { BigInteger MAX = new BigInteger ( ) ; int i = ; Scanner sc = new Scanner ( System . in ) ; int dataSet = sc . nextInt ( ) ; while ( i < dataSet ) { BigInteger inputedData1 , inputedData2 ; inputedData1 = sc . nextBigInteger ( ) ; inputedData2 = sc . nextBigInteger ( ) ; if ( inputedData1 . add ( inputedData2 ) . compareTo ( MAX ) < ) { System . out . println ( inputedData1 . add ( inputedData2 ) ) ; } else { System . out . println ( ) ; } i + + ; } } } import java.util.Scanner ; import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.util.Arrays ; import java.lang.Math ; class Main { private final static int DATA_TYPE_INTEGER = ; private final static double DATA_TYPE_DOUBLE = ; public static void main ( String [ ] args ) { InputStreamReader inputStreamReader = new InputStreamReader ( System . in ) ; BufferedReader reader = new BufferedReader ( inputStreamReader ) ; int [ ] num ; int DataType = DATA_TYPE_INTEGER ; boolean flag = false ; boolean first = true ; int [ ] x = null ; int [ ] y = null ; int [ ] z = null ; try { while ( flag | | reader . ready ( ) ) { num = changeNum ( reader . readLine ( ) , ( long ) DataType ) ; if ( first ) { first = false ; continue ; } if ( x = = null ) { x = num . clone ( ) ; } else { y = num . clone ( ) ; z = sum ( x , y ) ; if ( z . length < = ) { for ( int i = z . length - ; i > = ; i - - ) { System . out . print ( z [ i ] ) ; } System . out . println ( ) ; } else { System . out . println ( ) ; } x = null ; y = null ; } } reader . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } private static int [ ] changeNum ( String str , long DataType ) { int [ ] num = new int [ str . length ( ) ] ; int begin , end ; for ( int i = ; i < str . length ( ) ; i + + ) { begin = str . length ( ) - i - ; end = begin + ; num [ i ] = Integer . parseInt ( str . substring ( begin , end ) ) ; } return num ; } private static int [ ] sum ( int [ ] x , int [ ] y ) { int [ ] z = new int [ Max ( x . length , y . length ) ] ; boolean move_up = false ; int i = ; int xi , yi ; while ( i < x . length | | i < y . length ) { xi = ( i < x . length ) ? x [ i ] : ; yi = ( i < y . length ) ? y [ i ] : ; z [ i ] = move_up ? ( xi + yi + ) : ( xi + yi ) ; move_up = z [ i ] > = ? true : false ; z [ i ] % = ; i + + ; } if ( move_up ) { int [ ] z2 = new int [ z . length + ] ; for ( i = ; i < z . length ; i + + ) { z2 [ i ] = z [ i ] ; } z2 [ i ] = ; return z2 ; } else { return z ; } } private static int [ ] changeNum ( String str , int DataType ) { String [ ] data = str . split ( ) ; int [ ] num = new int [ data . length ] ; for ( int i = ; i < data . length ; i + + ) { num [ i ] = Integer . parseInt ( data [ i ] ) ; } return num ; } private static double [ ] changeNum ( String str , double DataType ) { String [ ] data = str . split ( ) ; double [ ] num = new double [ data . length ] ; for ( int i = ; i < data . length ; i + + ) { num [ i ] = Double . parseDouble ( data [ i ] ) ; } return num ; } private static int [ ] extractList ( int [ ] originalList , int begin , int end ) { int [ ] list = new int [ end - begin ] ; int p = ; for ( int i = begin ; i < = end ; i + + ) { list [ p + + ] = originalList [ i ] ; } return list ; } private static double [ ] extractList ( double [ ] originalList , int begin , int end ) { double [ ] list = new double [ end - begin ] ; int p = ; for ( int i = begin ; i < end ; i + + ) { list [ p + + ] = originalList [ i ] ; } return list ; } private static void swap ( int [ ] box , int a , int b ) { int temp = box [ a ] ; box [ a ] = box [ b ] ; box [ b ] = temp ; } private static void swap ( double [ ] box , int a , int b ) { double temp = box [ a ] ; box [ a ] = box [ b ] ; box [ b ] = temp ; } private static int Max ( int a , int b ) { return a > b ? a : b ; } } import java.util.* ; import static java.lang.Math.* ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; for ( int i = ; i < N ; i + + ) { char [ ] a = in . next ( ) . toCharArray ( ) , b = in . next ( ) . toCharArray ( ) ; System . out . println ( solve ( a , b ) ) ; } } static String solve ( char [ ] ac , char [ ] bc ) { StringBuilder ans = new StringBuilder ( ) ; if ( ac . length > | | bc . length > ) return ; int [ ] sum = new int [ ] ; int max = max ( ac . length , bc . length ) ; int [ ] a = new int [ max ] , b = new int [ max ] ; int count = ; for ( int i = max - ac . length ; i < max ; i + + ) { a [ i ] = Character . digit ( ac [ count + + ] , ) ; } count = ; for ( int i = max - bc . length ; i < max ; i + + ) { b [ i ] = Character . digit ( bc [ count + + ] , ) ; } int num = sum . length - ; for ( int i = max - ; i > = ; i - - ) { int x = sum [ num ] + a [ i ] + b [ i ] ; if ( x < ) { sum [ num ] = x ; } else { char [ ] s = String . valueOf ( x ) . toCharArray ( ) ; sum [ num - ] + = Character . digit ( s [ ] , ) ; sum [ num ] = Character . digit ( s [ ] , ) ; } num - - ; } boolean flg = false ; for ( int x : sum ) { if ( ! flg & & x ! = ) flg = true ; if ( flg ) ans . append ( x ) ; } return ans . length ( ) > ? : ans . toString ( ) ; } } import java.math.BigInteger ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int dataset = scanner . nextInt ( ) ; for ( int i = ; i < dataset ; i + + ) { BigInteger first = scanner . nextBigInteger ( ) ; BigInteger second = scanner . nextBigInteger ( ) ; System . out . println ( first . add ( second ) ) ; } } } import java.io.IOException ; import java.util.Scanner ; public class Main { public static void main ( String args [ ] ) throws IOException { Scanner bf = new Scanner ( System . in ) ; int N = Integer . parseInt ( bf . nextLine ( ) ) ; int [ ] ans = new int [ ] ; for ( int i = ; i < N ; i + + ) { for ( int j = ; j < ; j + + ) { ans [ j ] = ; } String str1 = bf . nextLine ( ) ; int len1 = str1 . length ( ) ; for ( int k = ; k < len1 ; k + + ) { ans [ - len1 + k ] = Integer . parseInt ( + str1 . charAt ( k ) ) ; } String str2 = bf . nextLine ( ) ; int len2 = str2 . length ( ) ; for ( int k = ; k < len2 ; k + + ) { ans [ - len2 + k ] + = Integer . parseInt ( + str2 . charAt ( k ) ) ; } for ( int k = ; k > ; k - - ) { if ( ans [ k ] > = ) { ans [ k ] - = ; ans [ k - ] + + ; } } if ( ans [ ] > = ) System . out . println ( ) ; else { boolean start = false ; for ( int j = ; j < ; j + + ) { if ( start ) System . out . print ( ans [ j ] ) ; else if ( ans [ j ] ! = ) { start = true ; System . out . print ( ans [ j ] ) ; } } System . out . println ( ) ; } } } } import java.math.BigInteger ; import java.util.Scanner ; public class Main { void run ( ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNext ( ) ) { BigInteger a = sc . nextBigInteger ( ) ; BigInteger b = sc . nextBigInteger ( ) ; BigInteger c = a . add ( b ) ; if ( c . toString ( ) . length ( ) > = ) { System . out . println ( ) ; } else { System . out . println ( c ) ; } } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } } import java.io.* ; import java.math.BigInteger ; import java.util.* ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader r = new BufferedReader ( new InputStreamReader ( System . in ) , ) ; Stack < Integer > ans = new Stack < Integer > ( ) ; String s = r . readLine ( ) ; int n = Integer . parseInt ( s ) ; int maxlength ; int digit , updigit ; char ar [ ] = { } ; char br [ ] = { } ; int j , i ; for ( i = ; i < n ; i + + ) { ans . clear ( ) ; String as = r . readLine ( ) ; String bs = r . readLine ( ) ; char a [ ] = as . toCharArray ( ) ; char b [ ] = bs . toCharArray ( ) ; if ( a . length > b . length ) maxlength = a . length ; else maxlength = b . length ; updigit = ; digit = ; for ( j = ; j < maxlength ; j + + ) { if ( j < a . length & & j < b . length ) { digit = ( int ) a [ a . length - - j ] + ( int ) b [ b . length - - j ] - + updigit ; } else if ( j < a . length ) { digit = ( int ) a [ a . length - - j ] - + updigit ; } else { digit = ( int ) b [ b . length - - j ] - + updigit ; } updigit = ; if ( digit > = ) { digit - = ; updigit = ; } ans . push ( digit ) ; } if ( updigit > = ) ans . push ( updigit ) ; if ( ans . size ( ) > ) System . out . print ( ) ; else while ( ! ans . empty ( ) ) System . out . print ( ans . pop ( ) ) ; } } } import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.math.BigInteger ; public class Main { public static void main ( String argv [ ] ) { int num ; BigInteger bd1 ; BigInteger bd2 ; BigInteger sum ; BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; num = Integer . parseInt ( br . readLine ( ) ) ; while ( - - num > = ) { ln1 = br . readLine ( ) ; ln2 = br . readLine ( ) ; if ( ln1 = = null | | ln2 = = null ) break ; if ( ln1 . length ( ) > | | ln2 . length ( ) > ) { System . out . println ( ) ; } bd1 = new BigInteger ( ln1 ) ; bd2 = new BigInteger ( ln2 ) ; sum = bd1 . add ( bd2 ) ; if ( sum . toString ( ) . getLength ( ) > ) { Stream . in . println ( ) ; } System . out . println ( sum ) ; } } } import java.util.* ; public class Main { public StringBuffer plus ( String big , String small ) { int next = ; String result = ; StringBuffer b = new StringBuffer ( big ) , s = new StringBuffer ( small ) ; b . reverse ( ) ; s . reverse ( ) ; for ( int i = ; i < b . length ( ) ; i + + ) { String one = , two = ; if ( ! b . substring ( i , i + ) . equals ( ) ) one = b . substring ( i , i + ) ; if ( i < s . length ( ) ) two = s . substring ( i , i + ) ; next = next + Integer . parseInt ( one ) + Integer . parseInt ( two ) ; if ( next > = ) { result + = Integer . toString ( next - ) ; next = ; } else { result + = Integer . toString ( next ) ; next = ; } } if ( next ! = ) result + = ; if ( result . length ( ) > = ) { StringBuffer rtn = new StringBuffer ( ) ; return rtn ; } else { StringBuffer rs = new StringBuffer ( result ) ; return rs . reverse ( ) ; } } public static void main ( String args [ ] ) { Main m = new Main ( ) ; Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { String big , small ; String in1 = sc . next ( ) ; String in2 = sc . next ( ) ; if ( in1 . length ( ) < in2 . length ( ) ) { big = in2 ; small = in1 ; } else { big = in1 ; small = in2 ; } System . out . println ( m . plus ( big , small ) ) ; } } } import java.util.* ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n ! = ) { String line = sc . next ( ) ; String line2 = sc . next ( ) ; if ( line . length ( ) < | | line2 . length ( ) < ) { int [ ] one = new int [ ] ; for ( int i = ; i < line . length ( ) ; i + + ) { one [ - i - ] = Integer . parseInt ( line . substring ( line . length ( ) - - i , line . length ( ) - i ) ) ; } int [ ] two = new int [ ] ; for ( int i = ; i < line2 . length ( ) ; i + + ) { two [ - i - ] = Integer . parseInt ( line2 . substring ( line2 . length ( ) - - i , line2 . length ( ) - i ) ) ; } int [ ] ans = new int [ ] ; for ( int i = ; i < ; i + + ) { ans [ - i - ] + = one [ - i - ] + two [ - i - ] ; if ( ans [ - i - ] > = & & - i - > = ) { int tmp = ans [ - i - ] ; ans [ - i - ] = tmp % ; ans [ - i - ] = ( tmp - tmp % ) / ; } } if ( ans [ ] > = ) { System . out . println ( ) ; } else { String finalAns = ; int i = ; while ( ans [ i ] = = ) { i + + ; } for ( int j = i ; j < ; j + + ) { finalAns + = ans [ j ] ; } System . out . println ( finalAns ) ; } } else { System . out . println ( ) ; } n - - ; } } } import java.util.* ; import java.math.* ; public class Main { static Scanner sc = new Scanner ( System . in ) ; static BigInteger a = new BigInteger ( ) ; static BigInteger b = new BigInteger ( ) ; static BigInteger ans = a . add ( b ) ; static int n ; public static void main ( String [ ] args ) { while ( sc . hasNext ( ) ) { n = sc . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { read ( ) ; slove ( ) ; } } } static boolean read ( ) { a = sc . nextBigInteger ( ) ; b = sc . nextBigInteger ( ) ; return true ; } static void slove ( ) { ans = a . add ( b ) ; if ( ans . toString ( ) . length ( ) > = | | a . toString ( ) . length ( ) > = | | b . toString ( ) . length ( ) > = ) { System . out . println ( ) ; } else { System . out . println ( ans ) ; } } } import java.math.BigInteger ; import java.util.Scanner ; public class Main { public static void main ( String . . . args ) throws Exception { Scanner scanner = null ; try { scanner = new Scanner ( System . in ) ; int dataSetNums = scanner . nextInt ( ) ; for ( int i = ; i < dataSetNums ; i + + ) { BigInteger firstNumber = scanner . nextBigInteger ( ) ; BigInteger secondNumber = scanner . nextBigInteger ( ) ; System . out . println ( firstNumber . add ( secondNumber ) . toString ( ) ) ; } } finally { if ( scanner ! = null ) { scanner . close ( ) ; } } } } import java.util.Scanner ; import java.math.BigInteger ; class Main { public static void main ( String [ ] args ) { Scanner stdin = new Scanner ( System . in ) ; int times = stdin . nextInt ( ) ; for ( int i = ; i < times ; i + + ) { BigInteger a = new BigInteger ( stdin . next ( ) ) ; System . out . println ( new BigInteger ( stdin . next ( ) ) . add ( a ) ) ; } } } import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.math.BigInteger ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; try { int n = Integer . parseInt ( br . readLine ( ) ) ; for ( int i = ; i < n ; i + + ) { BigInteger budget1 = new BigInteger ( br . readLine ( ) ) ; BigInteger budget2 = new BigInteger ( br . readLine ( ) ) ; if ( budget1 . toString ( ) . length ( ) > | | budget2 . toString ( ) . length ( ) > ) { System . out . println ( ) ; continue ; } String result = budget1 . add ( budget2 ) . toString ( ) ; if ( result . length ( ) > ) { System . out . println ( ) ; continue ; } System . out . println ( budget1 . add ( budget2 ) ) ; } } catch ( Exception e ) { System . out . println ( e ) ; } } } import java.io.IOException ; import java.util.Arrays ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int setNum = Integer . parseInt ( sc . nextLine ( ) ) ; int inputNum = setNum * ; String [ ] [ ] inputSet = new String [ setNum ] [ ] ; int cnt = ; boolean zero = true ; while ( < inputNum - - ) { String input = sc . nextLine ( ) ; if ( zero ) inputSet [ cnt ] [ ] = input ; else inputSet [ cnt + + ] [ ] = input ; zero = ! zero ; } for ( int i = ; i < setNum ; i + + ) { output ( inputSet [ i ] [ ] , inputSet [ i ] [ ] ) ; } } public static void output ( String a , String b ) { String [ ] partA = slice ( a ) ; String [ ] partB = slice ( b ) ; String [ ] output = new String [ ] ; Long carry = L ; int cnt = ; for ( int i = ; i < ; i + + ) { Long x = Long . valueOf ( partA [ i ] ! = null ? partA [ i ] : ) + Long . valueOf ( partB [ i ] ! = null ? partB [ i ] : ) + carry ; String y = String . valueOf ( x ) ; output [ i ] = y . length ( ) < = ? y : y . substring ( y . length ( ) - ) ; if ( y . length ( ) < = & & partA [ i + ] = = null & & partB [ i + ] = = null ) break ; carry = y . length ( ) < = ? L : Long . valueOf ( y . substring ( , y . length ( ) - ) ) ; cnt + + ; } if ( cnt = = ) { String buf = ; for ( int i = ; < = i ; i - - ) { buf + = output [ i ] ! = null ? output [ i ] : ; } if ( buf . length ( ) = = ) { System . out . println ( buf ) ; return ; } } if ( partA [ ] ! = null | | partB [ ] ! = null | | < = cnt ) { System . out . println ( ) ; } else { for ( int i = ; < = i ; i - - ) { System . out . print ( output [ i ] ! = null ? output [ i ] : ) ; } System . out . println ( ) ; } } public static String [ ] slice ( String a ) { int len = a . length ( ) ; String [ ] ret = new String [ ] ; int cnt = ; while ( < len ) { ret [ cnt + + ] = a . substring ( len - , len ) ; len = len - ; } ret [ cnt ] = a . substring ( , len ) ; return ret ; } } import java.io.* ; import java.util.* ; import java.math.BigInteger ; class Lib { static long extgcd ( long a , long b , long [ ] x ) { for ( long u = x [ ] = , v = x [ ] = ; a ! = ; ) { long q = b / a ; x [ ] - = q * u ; long t = x [ ] ; x [ ] = u ; u = t ; x [ ] - = q * v ; t = x [ ] ; x [ ] = v ; v = t ; b - = q * a ; t = b ; b = a ; a = t ; } return b ; } static long mod_inv ( long a , long m ) { long [ ] x = new long [ ] ; extgcd ( a , m , x ) ; return ( m + x [ ] % m ) % m ; } static BigInteger garner ( long [ ] a , long [ ] m ) { int ms = a . length ; long [ ] coffs = new long [ ms ] , constants = new long [ ms ] ; long [ ] digs = new long [ ms ] ; Arrays . fill ( coffs , ) ; for ( int i = ; i < ms ; + + i ) { long v = ( a [ i ] - constants [ i ] ) * mod_inv ( coffs [ i ] , m [ i ] ) % m [ i ] ; if ( v < ) v + = m [ i ] ; digs [ i ] = v ; for ( int j = i + ; j < ms ; j + + ) { constants [ j ] + = coffs [ j ] * v ; constants [ j ] % = m [ j ] ; coffs [ j ] * = m [ i ] ; coffs [ j ] % = m [ j ] ; } } BigInteger ans = BigInteger . valueOf ( ) , c = BigInteger . valueOf ( ) ; for ( int i = ms - ; i > = ; - - i ) { c = c . multiply ( BigInteger . valueOf ( m [ i ] ) ) ; ans = ans . multiply ( BigInteger . valueOf ( m [ i ] ) ) ; ans = ans . add ( BigInteger . valueOf ( digs [ i ] ) ) ; } if ( ans . compareTo ( c . divide ( BigInteger . valueOf ( ) ) ) > ) ans = ans . subtract ( c ) ; return ans ; } } class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; Random rnd = new Random ( ) ; int t = sc . nextInt ( ) ; BigInteger lim = BigInteger . TEN . pow ( ) ; int ms = ; long [ ] m = new long [ ms ] ; for ( int i = ; i < ms ; + + i ) { boolean ok ; do { long p = BigInteger . probablePrime ( , rnd ) . longValue ( ) ; ok = true ; for ( int j = ; j < i ; + + j ) if ( m [ j ] = = p ) { ok = false ; break ; } if ( ok ) m [ i ] = p ; } while ( ! ok ) ; } while ( t - - > ) { String a = sc . next ( ) ; String b = sc . next ( ) ; BigInteger ba = new BigInteger ( a ) ; BigInteger bb = new BigInteger ( b ) ; long [ ] ans = new long [ ms ] ; for ( int i = ; i < ms ; + + i ) { long ss = ba . mod ( BigInteger . valueOf ( m [ i ] ) ) . longValue ( ) ; long tt = bb . mod ( BigInteger . valueOf ( m [ i ] ) ) . longValue ( ) ; ans [ i ] = ( ss + tt ) % m [ i ] ; } BigInteger r = Lib . garner ( ans , m ) ; if ( r . compareTo ( lim ) > = ) out . println ( ) ; else out . println ( r ) ; } out . close ( ) ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st = = null | | ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } } import java.util.Arrays ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) { byte [ ] bof = new byte [ ] ; Arrays . fill ( bof , ( byte ) ) ; BigInteger overflow = new BigInteger ( bof ) ; Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { String str1 = sc . next ( ) ; String str2 = sc . next ( ) ; byte [ ] b1 = strToByteArray ( str1 ) ; byte [ ] b2 = strToByteArray ( str2 ) ; BigInteger i1 = new BigInteger ( b1 ) ; BigInteger i2 = new BigInteger ( b2 ) ; BigInteger sum = BigInteger . sum ( i1 , i2 ) ; if ( BigInteger . isABiggerThanB ( i1 , overflow ) | | BigInteger . isABiggerThanB ( i2 , overflow ) | | BigInteger . isABiggerThanB ( sum , overflow ) ) System . out . println ( ) ; else System . out . println ( sum ) ; } sc . close ( ) ; } static byte [ ] strToByteArray ( String cs ) { byte [ ] result = new byte [ cs . length ( ) ] ; for ( int i = ; i < cs . length ( ) ; i + + ) { result [ cs . length ( ) - i - ] = Byte . parseByte ( Character . toString ( cs . charAt ( i ) ) ) ; } return result ; } } class BigInteger { byte [ ] ds ; BigInteger ( byte [ ] d ) { int i ; for ( i = d . length - ; i > ; i - - ) { if ( d [ i ] ! = ) break ; } this . ds = Arrays . copyOfRange ( d , , i + ) ; } static boolean isABiggerThanB ( BigInteger a , BigInteger b ) { if ( a . ds . length > b . ds . length ) return true ; else if ( a . ds . length < b . ds . length ) return false ; else { return a . ds [ a . ds . length - ] > b . ds [ b . ds . length - ] ; } } static BigInteger sum ( BigInteger i1 , BigInteger i2 ) { if ( isABiggerThanB ( i1 , i2 ) ) return subsum ( i1 , i2 ) ; else return subsum ( i2 , i1 ) ; } static BigInteger subsum ( BigInteger i1 , BigInteger i2 ) { int digit = ( i1 . ds . length > i2 . ds . length ) ? i1 . ds . length + : i2 . ds . length + ; byte [ ] ds = new byte [ digit ] ; boolean c_up = false ; int i ; for ( i = ; i < i1 . ds . length ; i + + ) { ds [ i ] = ( i < i2 . ds . length ) ? ( byte ) ( i1 . ds [ i ] + i2 . ds [ i ] ) : i1 . ds [ i ] ; if ( c_up ) ds [ i ] + + ; if ( ds [ i ] > ) { ds [ i ] = ( byte ) ( ds [ i ] % ) ; c_up = true ; } else c_up = false ; } if ( c_up ) ds [ i ] + + ; return new BigInteger ( ds ) ; } public String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = ds . length - ; i > = ; i - - ) { sb . append ( ds [ i ] ) ; } return sb . toString ( ) ; } } import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; class Main { public String conbineBigNumbers ( String strA , String strB ) { int lengthA = strA . length ( ) ; int lengthB = strB . length ( ) ; int numPartitionA = ( int ) Math . ceil ( lengthA / ) ; int numPartitionB = ( int ) Math . ceil ( lengthB / ) ; int carryOver = ; String strSum = ; for ( int partNo = ; partNo < Math . max ( numPartitionA , numPartitionB ) ; partNo + + ) { int aParts ; int bParts ; if ( partNo > = numPartitionA ) { aParts = ; } else { aParts = Integer . parseInt ( strA . substring ( Math . max ( , lengthA - * ( partNo + ) ) , lengthA - * partNo ) ) ; } if ( partNo > = numPartitionB ) { bParts = ; } else { bParts = Integer . parseInt ( strB . substring ( Math . max ( , lengthB - * ( partNo + ) ) , lengthB - * partNo ) ) ; } String newParts = String . valueOf ( ( aParts + bParts + carryOver ) % ) ; int newPartsLength = newParts . length ( ) ; if ( newPartsLength < ) { for ( int i = ; i < - newPartsLength ; i + + ) newParts = + newParts ; } strSum = newParts + strSum ; carryOver = ( aParts + bParts + carryOver ) / ; } strSum = carryOver + strSum ; strSum = strSum . replaceFirst ( , ) ; return strSum ; } public static void main ( String [ ] args ) throws NumberFormatException , IOException { InputStreamReader isr = new InputStreamReader ( System . in ) ; BufferedReader br = new BufferedReader ( isr ) ; int numSet = Integer . parseInt ( br . readLine ( ) ) ; for ( int iSet = ; iSet < numSet ; iSet + + ) { String strA = br . readLine ( ) ; String strB = br . readLine ( ) ; if ( strA . length ( ) > | | strB . length ( ) > ) { System . out . println ( ) ; } else { Main nationalBudget = new Main ( ) ; String sum = nationalBudget . conbineBigNumbers ( strA , strB ) ; if ( sum . length ( ) > ) { System . out . println ( ) ; } else { System . out . println ( sum ) ; } } } } } import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; public class Main { public static void main ( String [ ] a ) { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int [ ] ans = new int [ ] ; String tmpString = null ; int dataSet_number = ; boolean overFlg = false ; try { if ( null ! = ( tmpString = bf . readLine ( ) ) ) { dataSet_number = Integer . parseInt ( tmpString ) ; dataSet_number * = ; } for ( int i = ; i < dataSet_number ; i + + ) { if ( i % = = ) ans = new int [ ] ; if ( null ! = ( tmpString = bf . readLine ( ) ) ) { if ( ! overFlg ) { int count = tmpString . length ( ) ; if ( count > ) { overFlg = true ; } else { char [ ] arr = tmpString . toCharArray ( ) ; for ( int j = ; j < ; j + + ) { if ( i % = = ) { if ( - j > count ) { ans [ j ] = ; } else { ans [ j ] = Integer . parseInt ( String . valueOf ( arr [ count - ( - j ) ] ) ) ; } } else { if ( j < count ) { int tmp = Integer . parseInt ( String . valueOf ( arr [ count - j - ] ) ) ; if ( tmp ! = ) ans [ - j ] + = tmp ; } if ( j ! = & & ans [ - j ] > ) { ans [ - j ] - = ; ans [ - j ] + = ; } } } } } } if ( i % = = ) { if ( ans [ ] ! = | | overFlg ) { System . out . println ( ) ; } else { boolean flg = false ; for ( int k = ; k < ; k + + ) { if ( ans [ k ] ! = ) flg = true ; if ( flg ) System . out . print ( ans [ k ] ) ; } System . out . println ( ) ; } overFlg = false ; } } } catch ( Exception e ) { System . err . println ( ) ; } finally { try { bf . close ( ) ; } catch ( IOException e ) { } } } } import java.math.BigInteger ; import java.util.Scanner ; public class Aoj0015 { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int dataset = scan . nextInt ( ) ; for ( int i = ; i < dataset ; i + + ) { BigInteger a = scan . nextBigInteger ( ) ; BigInteger b = scan . nextBigInteger ( ) ; System . out . println ( a . add ( b ) ) ; } } } import java.math.BigInteger ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int n = stdIn . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { String inputBigInt1 = stdIn . next ( ) ; String inputBigInt2 = stdIn . next ( ) ; if ( inputBigInt1 . length ( ) > = | inputBigInt2 . length ( ) > = ) { System . out . println ( ) ; break ; } BigInteger bigInt1 = new BigInteger ( inputBigInt1 ) ; BigInteger bigInt2 = new BigInteger ( inputBigInt2 ) ; BigInteger sumBigInt = bigInt1 . add ( bigInt2 ) ; if ( sumBigInt . toString ( ) . length ( ) > = ) { System . out . println ( ) ; break ; } System . out . println ( sumBigInt ) ; } } } import java.io.* ; import java.math.BigInteger ; import java.util.* ; / * * * @author yoshikyoto * / class Main { static final boolean DEBUG = false ; static Scanner sc = new Scanner ( new InputStreamReader ( System . in ) ) ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; public static void main ( String args [ ] ) throws Exception { int n = readInt ( ) ; for ( int i = ; i < n ; i + + ) { String s1 = readLine ( ) ; String s2 = readLine ( ) ; if ( s1 . length ( ) > | | s2 . length ( ) > ) { p ( ) ; continue ; } BigInteger bi1 = new BigInteger ( s1 ) ; BigInteger bi2 = new BigInteger ( s2 ) ; BigInteger bi = bi1 . add ( bi2 ) ; String s = bi . toString ( ) ; if ( s . length ( ) > ) { p ( ) ; continue ; } p ( s ) ; } } public static int [ ] readIntMap ( ) throws IOException { return parseInt ( readLine ( ) . split ( ) ) ; } public static String readLine ( ) throws IOException { return br . readLine ( ) ; } public static int readInt ( ) throws IOException { return Integer . parseInt ( br . readLine ( ) ) ; } public static void pa ( Object [ ] arr ) { System . out . println ( Arrays . toString ( arr ) ) ; } public static void pa ( int [ ] arr ) { System . out . println ( Arrays . toString ( arr ) ) ; } public static void pa ( double [ ] arr ) { System . out . println ( Arrays . toString ( arr ) ) ; } public static void pa ( boolean [ ] arr ) { System . out . println ( Arrays . toString ( arr ) ) ; } public static void p ( Object o ) { System . out . println ( o . toString ( ) ) ; } public static void d ( Object o ) { if ( DEBUG ) System . out . println ( o . toString ( ) ) ; } public static void da ( int [ ] arr ) { if ( DEBUG ) System . out . println ( Arrays . toString ( arr ) ) ; } public static void sort ( int [ ] a ) { Arrays . sort ( a ) ; } public static int [ ] parseInt ( String [ ] arr ) { int [ ] res = new int [ arr . length ] ; for ( int i = ; i < arr . length ; i + + ) res [ i ] = Integer . parseInt ( arr [ i ] ) ; return res ; } public static boolean [ ] parseBool ( String [ ] arr ) { int [ ] t = parseInt ( arr ) ; boolean [ ] res = new boolean [ t . length ] ; for ( int i = ; i < t . length ; i + + ) { if ( t [ i ] = = ) { res [ i ] = true ; } else { res [ i ] = false ; } } return res ; } public static int parseInt ( Object o ) { return Integer . parseInt ( o . toString ( ) ) ; } public static int digit ( int n ) { return String . valueOf ( n ) . length ( ) ; } public static String reverse ( String s ) { StringBuffer sb = new StringBuffer ( s ) ; return sb . reverse ( ) . toString ( ) ; } } / * * * 整数を数え上げたりするクラス * Prime . calc ( int n ) でnまでエラトステネスの篩を実行 * @author yoshikyoto * @param a [ i ] iが素数の時true * @param count [ i ] i以下の素数の数 * / class Prime { static boolean [ ] a ; static int [ ] count ; public static void calc ( int n ) { a = new boolean [ n + ] ; a [ ] = false ; a [ ] = false ; for ( int i = ; i < = n ; i + + ) a [ i ] = true ; for ( int i = ; i < ( n - ) / ; i + + ) if ( a [ i ] ) for ( int j = ; j * i < = n ; j + + ) a [ j * i ] = false ; count = new int [ n + ] ; count [ ] = ; for ( int i = ; i < = n ; i + + ) { int gain = ; if ( a [ i ] ) gain = ; count [ i ] = count [ i - ] + gain ; } } } class AI extends ArrayList < Integer > { } class SI extends Stack < Integer > { } class HI < E > extends HashMap < E , Integer > { ArrayList < E > keyArray = new ArrayList < E > ( ) ; public void add ( E key ) { add ( key , ) ; } public void add ( E key , Integer value ) { if ( containsKey ( key ) ) { value + = get ( key ) ; } else { keyArray . add ( key ) ; } put ( key , value ) ; } } import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.util.LinkedList ; import java.util.List ; public class Main { private static final int LIMIT_NUM = ; public static void main ( String [ ] args ) throws IOException { List < String > inputDataList = new LinkedList < String > ( ) ; BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String input = null ; try { while ( ( input = in . readLine ( ) ) ! = null ) { inputDataList . add ( input ) ; } } finally { in . close ( ) ; } int roopCnt = Integer . parseInt ( inputDataList . get ( ) ) ; for ( int i = ; i < = roopCnt ; i + + ) { String inputData1 = inputDataList . get ( i * - ) ; String inputData2 = inputDataList . get ( i * ) ; if ( inputData1 . length ( ) > LIMIT_NUM | | inputData2 . length ( ) > LIMIT_NUM ) { System . out . println ( ) ; continue ; } int [ ] [ ] num = new int [ ] [ LIMIT_NUM ] ; stockNum ( num , inputData1 , ) ; stockNum ( num , inputData2 , ) ; addminNum ( num ) ; if ( num [ ] [ LIMIT_NUM - ] > ) { System . out . println ( ) ; continue ; } StringBuilder printNum = new StringBuilder ( ) ; makePrintNum ( printNum , num [ ] ) ; System . out . println ( printNum . toString ( ) ) ; } } private static void stockNum ( int [ ] [ ] num , String inputData , int place ) { int cnt = ; for ( int i = inputData . length ( ) - ; i > = ; i - - ) { String tmp = inputData . substring ( cnt , cnt + ) ; num [ place ] [ i ] = Integer . parseInt ( tmp ) ; cnt + + ; } } private static void addminNum ( int [ ] [ ] num ) { for ( int i = ; i < LIMIT_NUM ; i + + ) { num [ ] [ i ] = num [ ] [ i ] + num [ ] [ i ] + num [ ] [ i ] ; if ( num [ ] [ i ] > & & i ! = LIMIT_NUM - ) { num [ ] [ i ] = num [ ] [ i ] - ; num [ ] [ i + ] + + ; } } } private static void makePrintNum ( StringBuilder printNum , int [ ] num ) { boolean flg = false ; for ( int i = num . length - ; i > = ; i - - ) { if ( num [ i ] ! = | | flg ) { flg = true ; printNum . append ( num [ i ] ) ; } } } } import java.math.BigDecimal ; import java.util.ArrayList ; import java.util.NoSuchElementException ; import java.util.Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { ArrayList < String > results = new ArrayList < String > ( ) ; try { int n = sc . nextInt ( ) ; while ( true ) { results . add ( getSumWithInputs ( n ) ) ; } } catch ( NoSuchElementException e ) { } for ( int i = ; i < results . size ( ) ; i + + ) { System . out . println ( results . get ( i ) ) ; } } private static String getSumWithInputs ( int n ) { String overflowMessage = ; BigDecimal result = new BigDecimal ( ) ; for ( int i = ; i < n ; i + + ) { String str = sc . next ( ) ; result = result . add ( new BigDecimal ( str ) ) ; } String resultString = result . toString ( ) ; if ( isOver80 ( resultString ) ) { return overflowMessage ; } return resultString ; } private static boolean isOver80 ( String str ) { if ( str . length ( ) > = ) { return true ; } else { return false ; } } } import java.math.BigInteger ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int n = stdIn . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { String inputBigInt1 = stdIn . next ( ) ; String inputBigInt2 = stdIn . next ( ) ; if ( inputBigInt1 . length ( ) > = | inputBigInt2 . length ( ) > = ) { System . out . println ( ) ; continue ; } BigInteger bigInt1 = new BigInteger ( inputBigInt1 ) ; BigInteger bigInt2 = new BigInteger ( inputBigInt2 ) ; BigInteger sumBigInt = bigInt1 . add ( bigInt2 ) ; if ( sumBigInt . toString ( ) . length ( ) > = ) { System . out . println ( ) ; continue ; } System . out . println ( sumBigInt ) ; } } } import java.io.* ; public class Main { public static void main ( String [ ] args ) throws IOException { InputStreamReader is = new InputStreamReader ( System . in ) ; BufferedReader br = new BufferedReader ( is ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; for ( int k = ; k < n ; k + + ) { String str1 = br . readLine ( ) ; / * if ( str1 . length ( ) > ) { System . out . println ( ) ; continue ; } * / String str2 = br . readLine ( ) ; if ( str2 . length ( ) > | | str1 . length ( ) > ) { System . out . println ( ) ; continue ; } int len1 = ( str1 . length ( ) - ) / + ; int len2 = ( str2 . length ( ) - ) / + ; int arr1 [ ] = new int [ len1 ] ; int arr2 [ ] = new int [ len2 ] ; for ( int i = ; i < len1 ; i + + ) { if ( i = = len1 - ) { arr1 [ i ] = Integer . parseInt ( str1 . substring ( , ( str1 . length ( ) - * i ) ) ) ; } else { arr1 [ i ] = Integer . parseInt ( str1 . substring ( str1 . length ( ) - * ( i + ) , str1 . length ( ) - * i ) ) ; } } for ( int i = ; i < len2 ; i + + ) { if ( i = = len2 - ) { arr2 [ i ] = Integer . parseInt ( str2 . substring ( , ( str2 . length ( ) - * i ) ) ) ; } else { arr2 [ i ] = Integer . parseInt ( str2 . substring ( str2 . length ( ) - * ( i + ) , str2 . length ( ) - * i ) ) ; } } int max ; int min ; if ( len1 > len2 ) { max = len1 ; min = len2 ; } else { max = len2 ; min = len1 ; } int [ ] sum = new int [ max + ] ; for ( int i = ; i < min ; i + + ) { sum [ i ] + = arr1 [ i ] + arr2 [ i ] ; if ( sum [ i ] > ) { sum [ i + ] + + ; sum [ i ] - = ; } } for ( int i = min ; i < max ; i + + ) { if ( max = = len1 ) sum [ i ] + = arr1 [ i ] ; else sum [ i ] + = arr2 [ i ] ; if ( sum [ i ] > ) { sum [ i + ] + + ; sum [ i ] - = ; } } if ( max = = & & sum [ max - ] > = ) { System . out . println ( ) ; continue ; } System . out . println ( max ) ; if ( sum [ max ] ! = ) { System . out . print ( sum [ max ] ) ; } for ( int i = ; i < max + ; i + + ) { if ( sum [ max ] = = & & i = = ) { System . out . print ( sum [ max - i ] ) ; } else System . out . print ( String . format ( , sum [ max - i ] ) ) ; } System . out . println ( ) ; } } } import java.math.BigInteger ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( ! = n - - ) { BigInteger a = sc . nextBigInteger ( ) ; BigInteger b = sc . nextBigInteger ( ) ; System . out . println ( a . add ( b ) ) ; } } } import java.io.* ; class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; for ( int i = ; i < n ; i + + ) { char [ ] [ ] data = { br . readLine ( ) . toCharArray ( ) , br . readLine ( ) . toCharArray ( ) } ; plus ( data ) ; } } private static int plus ( char [ ] [ ] data ) { int [ ] sum = new int [ data [ ] . length > data [ ] . length ? data [ ] . length : data [ ] . length ] ; if ( sum . length > = ) { System . out . println ( ) ; return ; } for ( int i = ; i < data . length ; i + + ) { for ( int j = ( data [ i ] . length - ) , k = ; j > = ; j - - , k + + ) { sum [ k ] + = data [ i ] [ j ] - ; } } for ( int i = ; i < sum . length ; i + + ) { if ( sum [ i - ] > = ) { sum [ i ] + + ; sum [ i - ] % = ; } } if ( sum . length > = & & sum [ sum . length - ] > = ) { System . out . println ( ) ; return ; } for ( int i = sum . length - ; i > = ; i - - ) { System . out . print ( sum [ i ] ) ; } System . out . println ( ) ; return ; } } import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.math.BigInteger ; public class Main { public static main ( String argv [ ] ) { int num ; BigDecimal bd1 ; BigDecimal bd2 ; BigDecimal sum ; BufferReader br = new BufferReader ( new InputStream ( System . in ) ) ; num = Integer . perseInt ( br . readLine ( ) ) ; while ( num - - ) { ln1 = br . readLine ( ) ; ln2 = br . readLine ( ) ; if ( ln1 = = null | | ln2 = = null ) break ; if ( ln1 . length ( ) > | | ln2 . length ( ) > ) { System . out . println ( ) ; } bd1 = new BigDecimal ( ln1 ) ; bd2 = new BigDecimal ( ln2 ) ; sum = bd1 . add ( bd2 ) ; if ( sum . toString ( ) . getLength ( ) > ) { Stream . in . println ( ) ; } System . out . println ( sum ) ; } } } import java.math.BigInteger ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { BigInteger a = new BigInteger ( sc . next ( ) ) ; BigInteger b = new BigInteger ( sc . next ( ) ) ; BigInteger c = a . add ( b ) ; if ( c . toString ( ) . length ( ) > = ) { System . out . println ( ) ; } else { System . out . println ( c ) ; } } } } import java.util.* ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { StringBuffer int1 = new StringBuffer ( scanner . next ( ) ) ; StringBuffer int2 = new StringBuffer ( scanner . next ( ) ) ; StringBuffer result = new StringBuffer ( ) ; int carry = ; int1 . reverse ( ) ; int2 . reverse ( ) ; int maxDig = Math . max ( int1 . length ( ) , int2 . length ( ) ) ; if ( maxDig > ) { System . out . println ( ) ; break ; } for ( int k = ; k < maxDig ; k + + ) { int aInt1 = ; int aInt2 = ; if ( k < int1 . length ( ) ) { aInt1 = Integer . parseInt ( int1 . substring ( k , k + ) ) ; } if ( k < int2 . length ( ) ) { aInt2 = Integer . parseInt ( int2 . substring ( k , k + ) ) ; } int aSum = carry + aInt1 + aInt2 ; if ( aSum > = ) { carry = ; result . append ( aSum - ) ; } else { carry = ; result . append ( aSum ) ; } } if ( carry = = ) { result . append ( ) ; } if ( result . length ( ) > ) { System . out . println ( ) ; break ; } System . out . println ( result . reverse ( ) ) ; } } } import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.math.BigInteger ; public class Main { public static void main ( String [ ] args ) { int num ; BigInteger bd1 ; BigInteger bd2 ; try { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; num = Integer . parseInt ( br . readLine ( ) ) ; while ( - - num > = ) { bd1 = new BigInteger ( br . readLine ( ) ) ; bd2 = new BigInteger ( br . readLine ( ) ) ; if ( bd1 . toString ( ) . length ( ) > | | bd2 . toString ( ) . length ( ) > ) { System . out . println ( ) ; } bd1 = bd1 . add ( bd2 ) ; System . out . println ( ( bd1 . toString ( ) . length ( ) > ) ? : bd1 . toString ( ) ) ; } } catch ( Exception e ) { } } } import java.util.* ; import java.math.BigInteger ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } private void run ( ) { int n = sc . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { BigInteger a = sc . nextBigInteger ( ) ; BigInteger b = sc . nextBigInteger ( ) ; System . out . println ( a . add ( b ) ) ; } } private final Scanner sc = new Scanner ( System . in ) ; } import java.math.BigInteger ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; BigInteger MAX = new BigInteger ( ) ; MAX = MAX . pow ( ) ; for ( int i = ; i < N ; i + + ) { BigInteger a = new BigInteger ( sc . next ( ) ) ; BigInteger b = new BigInteger ( sc . next ( ) ) ; System . out . println ( ( ( a . add ( b ) ) . compareTo ( MAX ) > = ) ? : a . add ( b ) ) ; } } } import java.util.* ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n ! = ) { String line = sc . next ( ) ; String line2 = sc . next ( ) ; if ( line . length ( ) < | | line2 . length ( ) < ) { int [ ] one = new int [ ] ; for ( int i = ; i < line . length ( ) ; i + + ) { one [ - i - ] = Integer . parseInt ( line . substring ( line . length ( ) - - i , line . length ( ) - i ) ) ; } int [ ] two = new int [ ] ; for ( int i = ; i < line2 . length ( ) ; i + + ) { two [ - i - ] = Integer . parseInt ( line2 . substring ( line2 . length ( ) - - i , line2 . length ( ) - i ) ) ; } int [ ] ans = new int [ ] ; for ( int i = ; i < ; i + + ) { ans [ - i - ] + = one [ - i - ] + two [ - i - ] ; if ( ans [ - i - ] > = & & - i - > = ) { int tmp = ans [ - i - ] ; ans [ - i - ] = tmp % ; ans [ - i - ] = ( tmp - tmp % ) / ; } } if ( ans [ ] > = ) { System . out . println ( ) ; } else { int i = ; while ( ans [ i ] = = ) { i + + ; } for ( int j = i ; j < ; j + + ) { System . out . print ( ans [ j ] ) ; } System . out . println ( ) ; } } else { System . out . println ( ) ; } n - - ; } } } import java.math.BigInteger ; import java.util.Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; for ( int i = ; i < n ; i + + ) { BigInteger a = new BigInteger ( scan . next ( ) ) ; BigInteger b = new BigInteger ( scan . next ( ) ) ; System . out . println ( a . add ( b ) ) ; } } } import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = br . readLine ( ) ; int n = Integer . parseInt ( str ) ; for ( int i = ; i < = n ; i + + ) { String strA = br . readLine ( ) ; String strB = br . readLine ( ) ; int lengthA = strA . length ( ) ; int lengthB = strB . length ( ) ; if ( lengthA > | | lengthB > ) { System . out . println ( ) ; continue ; } int length ; if ( lengthA > = lengthB ) { length = lengthA ; } else { length = lengthB ; } String [ ] charastrA = strA . split ( , ) ; String [ ] charastrB = strB . split ( , ) ; Reverse ( charastrA ) ; Reverse ( charastrB ) ; int [ ] charaA = new int [ length + ] ; int [ ] charaB = new int [ length + ] ; for ( int j = ; j < lengthA ; j + + ) { charaA [ j ] = Integer . parseInt ( charastrA [ j ] ) ; } for ( int j = ; j < lengthB ; j + + ) { charaB [ j ] = Integer . parseInt ( charastrB [ j ] ) ; } int [ ] sum = new int [ length + ] ; for ( int k = ; k < = length ; k + + ) { if ( charaA [ k ] + charaB [ k ] > = ) { sum [ k ] = charaA [ k ] + charaB [ k ] - ; charaA [ k + ] + + ; } else { sum [ k ] = charaA [ k ] + charaB [ k ] ; } } if ( sum . length = = & & sum [ length ] ! = ) { System . out . println ( ) ; continue ; } Boolean isHeadZero = true ; for ( int l = ; l < = length ; l + + ) { if ( isHeadZero ) { if ( sum [ length - l ] = = ) { continue ; } else { isHeadZero = false ; } } System . out . print ( sum [ length - l ] ) ; } if ( isHeadZero ) { System . out . print ( ) ; } System . out . println ( ) ; } } public static void Reverse ( String [ ] num ) { int length = num . length ; for ( int i = ; i < = length / ; i + + ) { int j = length - i - ; if ( i > = j ) { break ; } String temporary = num [ i ] ; num [ i ] = num [ j ] ; num [ j ] = temporary ; } } } import java.util.* ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n ! = ) { String line = sc . next ( ) ; String line2 = sc . next ( ) ; if ( line . length ( ) < & & line2 . length ( ) < ) { int [ ] one = new int [ ] ; for ( int i = ; i < line . length ( ) ; i + + ) { one [ - i - ] = Integer . parseInt ( line . substring ( line . length ( ) - - i , line . length ( ) - i ) ) ; } int [ ] two = new int [ ] ; for ( int i = ; i < line2 . length ( ) ; i + + ) { two [ - i - ] = Integer . parseInt ( line2 . substring ( line2 . length ( ) - - i , line2 . length ( ) - i ) ) ; } int [ ] ans = new int [ ] ; for ( int i = ; i < ; i + + ) { ans [ - i - ] + = one [ - i - ] + two [ - i - ] ; if ( ans [ - i - ] > = & & - i - > = ) { int tmp = ans [ - i - ] ; ans [ - i - ] = tmp % ; ans [ - i - ] = ( tmp - tmp % ) / ; } } if ( ans [ ] > = ) { System . out . println ( ) ; } else { String finalAns = ; int i = ; while ( ans [ i ] = = ) { i + + ; } for ( int j = i ; j < ; j + + ) { finalAns + = ans [ j ] ; } System . out . println ( finalAns ) ; } } else { System . out . println ( ) ; } n - - ; } } } 